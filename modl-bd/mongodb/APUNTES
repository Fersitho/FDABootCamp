

# menor mayor igual a cosas X
#$gt >
#$gte >=
#$lt <
#$lte <=
db.restaurantes.find({ puntuacion: {$gte: 4.5}}, { nombre:1, platos: 1, _id:0 })
#                     (Cursores, Proyecciones)
# usamos las comillas, asi accedemos a nuestros objetos dentro de un objeto o documento que tiene un objeto.
# { 
#   'direccion': {
#     'codigoPostal': '23456'
#   },
#   'nombre': 1
# }
db.restaurantes.find({ 'direccion.codigoPostal': '23456' },{ nombre: 1, _id:0 })

# array 'vector'

# buscando en el array cast de nuestro documento 'objeto', que contenga en cualquier posicion del array Paco Meliano
db.films.find({ cast: 'Paco Meliano' }) 

# buscando en el array cast de nuestro documento 'objeto', que contenga en la primera posicion del array Paco Meliano
db.films.find({ cast: ['Paco Meliano'] }) 

# buscando en el array cast de nuestro documento 'objeto', que contenga en la primera posicion del array Paco Meliano y seguido Paquita la Brava.
db.films.find({ cast: ['Paco Meliano', 'Paquita la Brava'] })

# buscando en el array cast de nuestro documento 'objeto', que contenga en la primera posicion del array Paco Meliano.
db.films.find({ 'cast.0' : 'Paco Meliano' })


# sort es muy biena nos ordena si pones -1 DESC 1 ASC 0 ni puta idea.

# esta mal david!!! EL SORT NO ES ASI IOOO!
 # nos devuelve la busca en ordenada desc y nos da el primero, de locos.
db.restaurantes.find().sort({ restaurant_id: -1 }).limit(1)

count()

# operadores para campos

$unset
db.productos.updateOne(
  {title: 'Pulp Fiction'},
  {$unset: {'year': 00}} #Eliminando del documento la clave 'year' elimina la propiedad year de nuestro objeto 'documento'
)

db.productos.updateOne(
  {title: 'Pulp Fiction'},
  {$set: {'year': 1994}} #Añadiendo al documento la clave 'year' con valor 1994
)

db.productos.updateOne(
  {title: 'Pulp Fiction'},
  {$rename: {'year': 'año'}} #Cambiando el nombre de la clave 'year' a 'año'
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, # valor act 1994
  {$max: {'year': 2000}} #Actualiza el año, si el valor que damos es mayor al del año actual.
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, # valor act 2000
  {$min: {'year': 1994}} #Actualiza el año, si el valor que damos es menor al  del año actual.
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
    $inc: { #increment si ponemos en negativo resta
      'tomato.reviews': 1, #Aumenta en 1 el valor de reviews
      'tomato.userReviews': 25 #Aumenta en 25 el valor de userReviews
      'tomato.algo': -25 #Decrementa en 25 el valor de algo
      }
  } 
)

# OPERADORES PARA ARRAYS VECTORES

db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
   $addToSet: {
    actors: 'Uma Thurman' #Añade Uma Thurman si no está ya en el array actors
   }
  } 
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
   $push: {
    reviews:{
      rating: 4.5,
      reviewer: 'Redes',
      
    } #Añade al array reviews el documento rating y reviewer
   }
  } 
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
   $set: {
    reviews:{
      rating: 4.5,
      reviewer: 'Redes',
      
    } #Añade o edita el objeto reviews
   }
  } 
)


# $pop - Elimina el primer o útimo elemento de un array
#      -1 primer elemento
#       1 último elemento


db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
   $pop: {contador: -1} #Elimina el primer elemento del array contador
  } 
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
   $pull: {contador: 3} #Elimina el elemento del array con valor igual a 3
  } 
)

db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {
   $pull: {contador: {$gte:3}} #Elimina todo elemento del array con valor mayor o igual a 3
  } 
)
 
db.productos.updateOne(
  {title: 'Pulp Fiction'}, 
  {            # anotacion: [0,2,2,0,5,6,8,5]
   $pullAll: { 
      anotacion: [0,5] #Elimina todo elemento del array con valor igual a 0 y 5 anotacion: [2,2,6,8]
    } 
  }
)

# LOS MODIFICADORES

db.movieDetails.updateOne (
  {title: 'The Martian'},
  {$push: {
    reviews: {
      $each: [{ # nos añade varios documentos a nuestro array reviews en orden sin el each insertariamos un array con 3 objetos al final de array reviews
          rating: 2.5,
          reviewer: 'Heidi Onda', text: 'Justa another movie'
        }, {
          rating: 0.5,
          reviewer: 'Esther Colero',
          text: 'The worst movie of the year'
        }, {
          rating: 3.5,
          reviewer: 'Elba Surero',
          text: 'Nice Movie'
      }]
    }
  }})


db.movieDetails.updateOne ( 
  {title: 'The Martian'},
  {$push: {
    contador: { # indicamos la posicion donde se insertará nuestro elemento en nuestro array no sustituye empuja el resto de elemtnos.
      $each: [7], #hay se usar each si o si lo requiere position.
      $position: 2 
    }
  }})


  db.movieDetails.updateMany ( 
  {rated: null},
  {$unset: {
    rated: ''
  }})


db.films.find(
  { 
    rated : {$exists:false} #obtenemos todos los documnetos que la propiedad rated no existe.
  }
)


# la opstions

upsert: true # inserta o actualiza el documento update-inserts

db.productos.updateOne(
  {title: 'Pulp Fiction'},
  {$set: {
    'director': 'Paco'
    'year': 1994
    }}, #Editamos el valor de year por 1994 y director, PERO si no existe por el UPSERT lo insertamos,
  {upsert: true }
)
# la direncia de update y replace --> update añade o modifica pero no elimina los campos no indicados
# con replace, remplaza el documento por completo.
db.productos.replaceOne(
  {title: 'Pulp Fiction'},
  { # aqui todo el documenot "objeto" que reemplazará el existente.
    "title": 'Paco',
  }
)

# Eliminar DELETE borrar quitar un documento borrar obejto obt deete


db.productos.deleteOne() db.productos.deleteMany()


db.productos.deleteOne(
  {_id: 'tt0110912'}
)
db.productos.deleteOne(
  {title: 'Pulp Fiction'}
)

db.productos.deleteMany(# elimina todos los documnetos que encuentra el filtro.
  {director: 'Paco'}
)
db.productos.deleteOne( # elimina el primer documneto que encuentra el filtro.
  {director: 'Paco'}
)

db.productos.deleteMany(# elimina todos los documnetos que encuentra el filtro.
  {year: {$gt: 2000}}
)


# LOS OPERADORES DE CONSULTA EN LOS FILTROS!
# Tenemos operadors de: comparacion, elementos, logicos, arrays y evaluacion

# 1 comparacion aquellos operadors que nos permiten buscar segun el valor de un campo.

#Ope. comparación    RELACIONAL    MONGODB
Igual que          --    =    -->    $eq   -- > Equal to
Distinto de        --  != <>  -->    $ne   -- > Not Equal to
Mayor que          --    >    -->    $gt   -- > Greater than
Mayor o igual que  --    >=   -->    $gte  -- > Greater than or Equal to
Menor que          --    <    -->    $lt   -- > Less than
Menor o igual que  --    <=   -->    $lte  -- > Less than or Equal to

db.movieDetails.find(
  { runtime: { $gte: 90, lt: 120 } }
) # Nos muestras las pelis que tengan mas tiempo de 90 y menos de 120 muinutos
# Operadors de pertenencia de conjuntos

      IN     --> $in  --> Pertenece
      NOT IN --> $nin --> No pertenece

db.movieDetails.find(
  { rated: { $in: ['G', 'PG'] } } # nos muestra todas las peliculas que contengan G o PG.
)

db.movieDetails.find(
  { rated: { $nin: ['G', 'PG', 'PG-13'] } } # nos muestra todas las peliculas que no contengan G o PG o PG-13.
)

# Operadores Elementos: $exists y $type

# $exists nos muestra los documentos que tengan o no tengan un campo independienteente del valor que tengan en su interior.
db.movieDetails.find(
  { poster: {$exist: true} } # muestra los documentos en los que el campo poster existe esta definido incluidos los NULL.
)
db.movieDetails.find(
  { poster: {$exist: false} } # muestra los documentos en los que el campo poster no existe "se ven vacios en la tabla" y null no incluido.
)

db.movieDetails.find(
  { poster: null } # muestra los documentos en los que el campo poster es null o esta vacio "no existe"
)

# $type nos muestra los docu,mentos que tengan un determinado campo pero con un tipo Integer varchar etc... mongodb nos permite tener el mismo campo en diferentes documentos con diferentes tipos es flexible.

db.movieDetails.find(
  { viewerRating: {$type: 'int'} } # muestra los documentos en los que el campo poster viewerRating es del tipo integer!
)




# OPERADORES LOGICOS AND NOT NOR OR && || 

$and --> solo cumple si todo se cumple
$not --> invierte el efecto de la condicion 
$nor --> todos los documentos que no cumplan ninguna de esas condiciones
$or  --> devuelve todos los documento que cumplan almenos con 1 opcion de filtrado.

# sintaxis dentro de un .find()
# $or 
# Une las cláusulas con un OR lógico 
   { $or: [ { selector1 }, { selector2 }, ... ] }

# $nor
#Une cláusulas de consulta con un NOR lógico 
   { $nor: [ { selector1 }, { selector2 }, ... ] }

# $and 
#Une cláusulas de consulta con un AND lógico 
   { $and: [ { selector1 }, { selector2 }, ... ] }

 # $not 
 #Invierte el efecto de una expresión de consulta.
   { campo: { $not: { selector } } }

db.movieDetails.find(
  { $or: [
    { 'director': 'PACO'},
    { 'director' : 'Paquita'}
  ]} #nos muestra todos los documentos que tengan como director a paco o paquita.
)

db.movieDetails.find(
  { $nor: [
    { 'director': 'PACO'},
    { 'director' : 'Paquita'}
  ]} #nos muestra todos los documentos que no tengan como director a paco o paquita.
)

db.movieDetails.find(
  { $and: [
    { 'director': 'PACO'},
    { 'runtime' : { $gt: 120 }}
  ]} #nos muestra todos los documentos que tengan como director a paco y la duraciopn sea mauyor a 120 minutos.
)

db.movieDetails.find(
  { $and: [
    { 'director': 'PACO'},
    { 'runtime' : { $not: { $gt: 120 }}} # invierte la condicion ahora monstrara las menores a 120 minutos.
  ]} #nos muestra todos los documentos que tengan como director a paco y la duraciopn sea menor a 120 minutos.
)

db.movieDetails.find(
  {
    { 'runtime' : { $not: { $gt: 120 }}} 
  } #nos muestra todos los documentos que tengan  la duraciopn sea menor a 120 minutos.
)
 

# Tenemos 3 opciones para un campo en nuestros documentos:
# 1º Es definido existe con un valor asignado.
# 2º Existe pero tiene como valor NULL
# 3º No existe el campo.

# dentro de un find:
{ 'year': null }
# Nos  muestra tanto los null como los que no existen

{ 'year': {$ne: null} }
# Nos muestra los que existen, no muestra los null.

{ 'year': {$exist: true} }
# Nos  muestra tanto los null como los que existen

{ 'year': {$exist: false} }
# Nos muestra solos los que no existen, "no muestra los null"

{ $and: [
  {'year': null},
  {'year': {$exist: true}}
] }

# Operadores para ARRAYS "VECTORES"

$all $elemMatch $size

db.movieDetails.find(
  { countries: { $all: ['USA','Spain'] }}
) 
# nos muestra todos los documentos que tengan en el campo countries "array" todos los valores que especificamos.
# pueden devolvernos el caso que tenga tener más valores, pero siempre los 2 incluidos, nunca menos.
# no tienen que estar en el mismo orden.
db.movieDetails.find(
  { countries: { $all: ['USA','Spain'] }}
) 

# Nos devuelve solo documentos que contenien el campo vector con el tamaño indicado. que tiene un .lenght igual
db.movieDetails.find(
  { countries: { $size: 2 }}
) 

# $elemntMatch 
# Nos devievle los documentos que contienen un elemento del campo vector que coincide con todas las condiciones especificadas.

db.movieDetails.find(
  { boxOffice: { $elemntMatch: {"pais": "españa", "ingreso": {$gt: 200}} }}
) 

# REGEX EXPRESIONES REGULARES REGULAR REGEX
# para más compplejo: $text -- mongodb oficial Evalutaion

# { campo: { $regex: /queryREGEX/<options> }}
db.movieDetails.find(
  { boxOffice: { $elemntMatch: {"pais": "españa", "ingreso": {$gt: 200}} }}
) 


Método aggregate:
El método aggregate en MongoDB es una poderosa herramienta que permite realizar operaciones de agregación en documentos de una colección. Estas operaciones son similares a las operaciones GROUP BY en SQL, pero con la flexibilidad y capacidad de manipulación de documentos JSON.

La estructura básica de una operación de agregación con aggregate consiste en una serie de etapas, donde cada etapa realiza una transformación específica en los documentos. Estas etapas se proporcionan como una matriz de objetos en la que cada objeto representa una etapa de la operación.

Etapas de aggregate:

$match (Filtrado): Filtra los documentos que cumplen con ciertos criterios.
{ $match: { campo: valor } }


$project (Proyección): Incluye o excluye campos, y puede crear nuevos campos calculados.
{ $project: { campo1: 1, campo2: 1, nuevoCampo: { $sum: ["$campo1", "$campo2"] } } }


$group (Agrupación): Agrupa documentos basándose en un campo y realiza operaciones de agregación (sumas, promedios, etc.) en esos grupos.
{ $group: { _id: "$campo", total: { $sum: "$cantidad" } } }


$sort (Ordenamiento): Ordena los documentos según un campo.
{ $sort: { campo: 1 } }


$limit (Límite): Limita el número de documentos devueltos.
{ $limit: 10 }


$unwind (Desdoblar campos de matriz): Desdobla campos de matriz en documentos separados.
{ $unwind: "$campoArray" }

Estas etapas se pueden encadenar en cualquier orden según tus necesidades.

Ejemplo de Agregación Completa: Supongamos que tienes una colección llamada ventas y deseas obtener el total de ventas por producto y por año. El código podría verse así:

db.ventas.aggregate([
  { $match: { fecha: { $gte: ISODate('2022-01-01'), $lt: ISODate('2023-01-01') } } },
  { $project: { producto: 1, cantidad: 1, año: { $year: "$fecha" } } },
  { $group: { _id: { producto: "$producto", año: "$año" }, totalVentas: { $sum: "$cantidad" } } },
  { $sort: { "_id.año": 1, totalVentas: -1 } },
  { $limit: 10 }
])

Este ejemplo realiza una serie de etapas para filtrar las ventas por un rango de fechas, proyectar campos necesarios, agrupar por producto y año, calcular el total de ventas y finalmente ordenar y limitar los resultados.


Operador $group:
$group es un operador en MongoDB que se utiliza para agrupar documentos por un campo específico y realizar operaciones de agregación en esos grupos. Es una de las etapas clave en las operaciones de agregación.

Estructura básica del operador $group:

{
  $group: {
    _id: <campo o expresión de agrupación>,
    <nueva_variable_1>: { <operador>: <expresión> },
    <nueva_variable_2>: { <operador>: <expresión> },
    // ...
  }
}
_id: Especifica el campo por el cual se agruparán los documentos. Puedes usar null si deseas realizar una agregación sin agrupación explícita.

<nueva_variable_1>, <nueva_variable_2>, ...: Son variables que representan los resultados de operaciones de agregación. Puedes calcular la media, suma, contar, etc., en estas variables.

<operador>: Indica la operación de agregación que deseas realizar, como $sum, $avg, $min, $max, $push, entre otros.

<expresión>: Representa el campo o la expresión sobre la cual se realizará la operación de agregación.

Ejemplo de aggregate con $group:
db.productos.aggregate([
  {
    $group: {
      _id: null,
      media_precio: { $avg: "$precio" }
    }
  }
])

los operadores más comunes que puedes utilizar dentro de la etapa $group:

Operadores de Acumulación:
$sum: Calcula la suma de los valores de un campo.
$avg: Calcula el promedio de los valores de un campo.
$min: Encuentra el valor mínimo de un campo.
$max: Encuentra el valor máximo de un campo.
$first: Devuelve el primer valor encontrado en el grupo.
$last: Devuelve el último valor encontrado en el grupo.

Operadores de Expresiones Aritméticas:
$add: Suma valores.
$subtract: Resta valores.
$multiply: Multiplica valores.
$divide: Divide valores.

Operadores de Conjunto:
$addToSet: Agrega valores únicos a un conjunto.
$push: Agrega valores a un array.

Operadores de Fecha y Hora:
$year: Extrae el año de una fecha.
$month: Extrae el mes de una fecha.
$dayOfMonth: Extrae el día del mes de una fecha.
$hour, $minute, $second: Extraen la hora, minuto y segundo de una fecha.

Operadores de Condición:
$cond: Evalúa una expresión de condición y devuelve un resultado basado en el resultado de esa condición.

Otros Operadores:
$addToSet: Agrega valores únicos a un conjunto.
$push: Agrega valores a un array.
$sum: Suma los valores de un campo.